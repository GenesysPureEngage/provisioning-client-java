/*
 * Provisioning API
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.91.4963
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.genesys.internal.provisioning.api;

import com.genesys.internal.common.ApiCallback;
import com.genesys.internal.common.ApiClient;
import com.genesys.internal.common.ApiException;
import com.genesys.internal.common.ApiResponse;
import com.genesys.internal.common.Configuration;
import com.genesys.internal.common.Pair;
import com.genesys.internal.common.ProgressRequestBody;
import com.genesys.internal.common.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.genesys.internal.provisioning.model.RecCertCheckResponseStatusError;
import com.genesys.internal.provisioning.model.RecCertCheckResponseStatusSuccess;
import com.genesys.internal.provisioning.model.RecCertDeleteResponseError;
import com.genesys.internal.provisioning.model.RecCertDeleteResponseSuccess;
import com.genesys.internal.provisioning.model.RecCertGetResponseError;
import com.genesys.internal.provisioning.model.RecCertGetResponseSuccess;
import com.genesys.internal.provisioning.model.RecCertKeyCheckResponseStatusError;
import com.genesys.internal.provisioning.model.RecCertKeyCheckResponseStatusSuccess;
import com.genesys.internal.provisioning.model.RecCertPostResponseStatusError;
import com.genesys.internal.provisioning.model.RecCertPostResponseStatusSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecordingCertificatesApi {
    private ApiClient apiClient;

    public RecordingCertificatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecordingCertificatesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for recCertCheck
     * @param certificateFile PEM certificate file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recCertCheckCall(File certificateFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recording/certificates/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (certificateFile != null)
        localVarFormParams.put("certificate_file", certificateFile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recCertCheckValidateBeforeCall(File certificateFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateFile' is set
        if (certificateFile == null) {
            throw new ApiException("Missing the required parameter 'certificateFile' when calling recCertCheck(Async)");
        }
        

        com.squareup.okhttp.Call call = recCertCheckCall(certificateFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check a pem certificate
     * The POST operation will check a pem certificate and return it&#39;s properties
     * @param certificateFile PEM certificate file (required)
     * @return RecCertCheckResponseStatusSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RecCertCheckResponseStatusSuccess recCertCheck(File certificateFile) throws ApiException {
        ApiResponse<RecCertCheckResponseStatusSuccess> resp = recCertCheckWithHttpInfo(certificateFile);
        return resp.getData();
    }

    /**
     * Check a pem certificate
     * The POST operation will check a pem certificate and return it&#39;s properties
     * @param certificateFile PEM certificate file (required)
     * @return ApiResponse&lt;RecCertCheckResponseStatusSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RecCertCheckResponseStatusSuccess> recCertCheckWithHttpInfo(File certificateFile) throws ApiException {
        com.squareup.okhttp.Call call = recCertCheckValidateBeforeCall(certificateFile, null, null);
        Type localVarReturnType = new TypeToken<RecCertCheckResponseStatusSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check a pem certificate (asynchronously)
     * The POST operation will check a pem certificate and return it&#39;s properties
     * @param certificateFile PEM certificate file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recCertCheckAsync(File certificateFile, final ApiCallback<RecCertCheckResponseStatusSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recCertCheckValidateBeforeCall(certificateFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RecCertCheckResponseStatusSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recCertCheckKey
     * @param keyFile PEM key file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recCertCheckKeyCall(File keyFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recording/certificates/check-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (keyFile != null)
        localVarFormParams.put("key_file", keyFile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recCertCheckKeyValidateBeforeCall(File keyFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyFile' is set
        if (keyFile == null) {
            throw new ApiException("Missing the required parameter 'keyFile' when calling recCertCheckKey(Async)");
        }
        

        com.squareup.okhttp.Call call = recCertCheckKeyCall(keyFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Check a pem certificate
     * The POST operation will check a pem certificate key
     * @param keyFile PEM key file (required)
     * @return RecCertKeyCheckResponseStatusSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RecCertKeyCheckResponseStatusSuccess recCertCheckKey(File keyFile) throws ApiException {
        ApiResponse<RecCertKeyCheckResponseStatusSuccess> resp = recCertCheckKeyWithHttpInfo(keyFile);
        return resp.getData();
    }

    /**
     * Check a pem certificate
     * The POST operation will check a pem certificate key
     * @param keyFile PEM key file (required)
     * @return ApiResponse&lt;RecCertKeyCheckResponseStatusSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RecCertKeyCheckResponseStatusSuccess> recCertCheckKeyWithHttpInfo(File keyFile) throws ApiException {
        com.squareup.okhttp.Call call = recCertCheckKeyValidateBeforeCall(keyFile, null, null);
        Type localVarReturnType = new TypeToken<RecCertKeyCheckResponseStatusSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check a pem certificate (asynchronously)
     * The POST operation will check a pem certificate key
     * @param keyFile PEM key file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recCertCheckKeyAsync(File keyFile, final ApiCallback<RecCertKeyCheckResponseStatusSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recCertCheckKeyValidateBeforeCall(keyFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RecCertKeyCheckResponseStatusSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recCertDelete
     * @param alias Alias of a certificate (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recCertDeleteCall(String alias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recording/certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (alias != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alias", alias));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recCertDeleteValidateBeforeCall(String alias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'alias' is set
        if (alias == null) {
            throw new ApiException("Missing the required parameter 'alias' when calling recCertDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = recCertDeleteCall(alias, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a GIR certificate.
     * The DELETE operation will delete a GIR certificate by it&#39;s alias
     * @param alias Alias of a certificate (required)
     * @return RecCertDeleteResponseSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RecCertDeleteResponseSuccess recCertDelete(String alias) throws ApiException {
        ApiResponse<RecCertDeleteResponseSuccess> resp = recCertDeleteWithHttpInfo(alias);
        return resp.getData();
    }

    /**
     * Delete a GIR certificate.
     * The DELETE operation will delete a GIR certificate by it&#39;s alias
     * @param alias Alias of a certificate (required)
     * @return ApiResponse&lt;RecCertDeleteResponseSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RecCertDeleteResponseSuccess> recCertDeleteWithHttpInfo(String alias) throws ApiException {
        com.squareup.okhttp.Call call = recCertDeleteValidateBeforeCall(alias, null, null);
        Type localVarReturnType = new TypeToken<RecCertDeleteResponseSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a GIR certificate. (asynchronously)
     * The DELETE operation will delete a GIR certificate by it&#39;s alias
     * @param alias Alias of a certificate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recCertDeleteAsync(String alias, final ApiCallback<RecCertDeleteResponseSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recCertDeleteValidateBeforeCall(alias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RecCertDeleteResponseSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recCertGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recCertGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recording/certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recCertGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = recCertGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get GIR certificates.
     * The GET operation will return a list of certificates
     * @return RecCertGetResponseSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RecCertGetResponseSuccess recCertGet() throws ApiException {
        ApiResponse<RecCertGetResponseSuccess> resp = recCertGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get GIR certificates.
     * The GET operation will return a list of certificates
     * @return ApiResponse&lt;RecCertGetResponseSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RecCertGetResponseSuccess> recCertGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = recCertGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<RecCertGetResponseSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get GIR certificates. (asynchronously)
     * The GET operation will return a list of certificates
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recCertGetAsync(final ApiCallback<RecCertGetResponseSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recCertGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RecCertGetResponseSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for recCertPost
     * @param certificateFile PEM certificate file (required)
     * @param keyFile PEM key file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call recCertPostCall(File certificateFile, File keyFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recording/certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (certificateFile != null)
        localVarFormParams.put("certificate_file", certificateFile);
        if (keyFile != null)
        localVarFormParams.put("key_file", keyFile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call recCertPostValidateBeforeCall(File certificateFile, File keyFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateFile' is set
        if (certificateFile == null) {
            throw new ApiException("Missing the required parameter 'certificateFile' when calling recCertPost(Async)");
        }
        
        // verify the required parameter 'keyFile' is set
        if (keyFile == null) {
            throw new ApiException("Missing the required parameter 'keyFile' when calling recCertPost(Async)");
        }
        

        com.squareup.okhttp.Call call = recCertPostCall(certificateFile, keyFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add a pem certificate and key
     * The POST operation will add a pem certificate and it&#39;s key to the RCS service
     * @param certificateFile PEM certificate file (required)
     * @param keyFile PEM key file (required)
     * @return RecCertPostResponseStatusSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RecCertPostResponseStatusSuccess recCertPost(File certificateFile, File keyFile) throws ApiException {
        ApiResponse<RecCertPostResponseStatusSuccess> resp = recCertPostWithHttpInfo(certificateFile, keyFile);
        return resp.getData();
    }

    /**
     * Add a pem certificate and key
     * The POST operation will add a pem certificate and it&#39;s key to the RCS service
     * @param certificateFile PEM certificate file (required)
     * @param keyFile PEM key file (required)
     * @return ApiResponse&lt;RecCertPostResponseStatusSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RecCertPostResponseStatusSuccess> recCertPostWithHttpInfo(File certificateFile, File keyFile) throws ApiException {
        com.squareup.okhttp.Call call = recCertPostValidateBeforeCall(certificateFile, keyFile, null, null);
        Type localVarReturnType = new TypeToken<RecCertPostResponseStatusSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a pem certificate and key (asynchronously)
     * The POST operation will add a pem certificate and it&#39;s key to the RCS service
     * @param certificateFile PEM certificate file (required)
     * @param keyFile PEM key file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call recCertPostAsync(File certificateFile, File keyFile, final ApiCallback<RecCertPostResponseStatusSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = recCertPostValidateBeforeCall(certificateFile, keyFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RecCertPostResponseStatusSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
