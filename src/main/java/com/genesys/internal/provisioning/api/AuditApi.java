/*
 * Provisioning API
 * The provisioning service will be used to create objects in configuration server in a way that is consistent with the BEC model. The \"users\" resource will be used to perform CRUD operations on config server person objects. Note that this API will extend the low level configuration server API to add additional functionality that will allow persons to be created in a way that makes them immediately useable in BEC. Operations on this resource may result in other configuration objects being modified as well. 
 *
 * OpenAPI spec version: 9.0.000.05.1207
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.genesys.internal.provisioning.api;

import com.genesys.internal.common.ApiCallback;
import com.genesys.internal.common.ApiClient;
import com.genesys.internal.common.ApiException;
import com.genesys.internal.common.ApiResponse;
import com.genesys.internal.common.Configuration;
import com.genesys.internal.common.Pair;
import com.genesys.internal.common.ProgressRequestBody;
import com.genesys.internal.common.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.genesys.internal.provisioning.model.ApiAuditSuccessResponse;
import com.genesys.internal.provisioning.model.ApiErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditApi {
    private ApiClient apiClient;

    public AuditApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAuditInfo
     * @param limit Limit number of users to fetch (optional)
     * @param asc Sort results ascending/descending (optional, default to desc)
     * @param orderBy comma-separated list of fields to sort on, supported: id, createdAt, msg, username  (optional, default to id)
     * @param username Only users with exact match will pass (optional)
     * @param auditId Only one row will be displayed with specified ID (optional)
     * @param auditFileId If specified, sends raw file data with content-type application/octet-stream for specified file-id.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuditInfoCall(Integer limit, String asc, String orderBy, String username, String auditId, String auditFileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (asc != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asc", asc));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (auditId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("audit_id", auditId));
        if (auditFileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("audit_file_id", auditFileId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuditInfoValidateBeforeCall(Integer limit, String asc, String orderBy, String username, String auditId, String auditFileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAuditInfoCall(limit, asc, orderBy, username, auditId, auditFileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves audit data
     * The GET operation will fetch Audit API with filters
     * @param limit Limit number of users to fetch (optional)
     * @param asc Sort results ascending/descending (optional, default to desc)
     * @param orderBy comma-separated list of fields to sort on, supported: id, createdAt, msg, username  (optional, default to id)
     * @param username Only users with exact match will pass (optional)
     * @param auditId Only one row will be displayed with specified ID (optional)
     * @param auditFileId If specified, sends raw file data with content-type application/octet-stream for specified file-id.  (optional)
     * @return ApiAuditSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiAuditSuccessResponse getAuditInfo(Integer limit, String asc, String orderBy, String username, String auditId, String auditFileId) throws ApiException {
        ApiResponse<ApiAuditSuccessResponse> resp = getAuditInfoWithHttpInfo(limit, asc, orderBy, username, auditId, auditFileId);
        return resp.getData();
    }

    /**
     * Retrieves audit data
     * The GET operation will fetch Audit API with filters
     * @param limit Limit number of users to fetch (optional)
     * @param asc Sort results ascending/descending (optional, default to desc)
     * @param orderBy comma-separated list of fields to sort on, supported: id, createdAt, msg, username  (optional, default to id)
     * @param username Only users with exact match will pass (optional)
     * @param auditId Only one row will be displayed with specified ID (optional)
     * @param auditFileId If specified, sends raw file data with content-type application/octet-stream for specified file-id.  (optional)
     * @return ApiResponse&lt;ApiAuditSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiAuditSuccessResponse> getAuditInfoWithHttpInfo(Integer limit, String asc, String orderBy, String username, String auditId, String auditFileId) throws ApiException {
        com.squareup.okhttp.Call call = getAuditInfoValidateBeforeCall(limit, asc, orderBy, username, auditId, auditFileId, null, null);
        Type localVarReturnType = new TypeToken<ApiAuditSuccessResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves audit data (asynchronously)
     * The GET operation will fetch Audit API with filters
     * @param limit Limit number of users to fetch (optional)
     * @param asc Sort results ascending/descending (optional, default to desc)
     * @param orderBy comma-separated list of fields to sort on, supported: id, createdAt, msg, username  (optional, default to id)
     * @param username Only users with exact match will pass (optional)
     * @param auditId Only one row will be displayed with specified ID (optional)
     * @param auditFileId If specified, sends raw file data with content-type application/octet-stream for specified file-id.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuditInfoAsync(Integer limit, String asc, String orderBy, String username, String auditId, String auditFileId, final ApiCallback<ApiAuditSuccessResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuditInfoValidateBeforeCall(limit, asc, orderBy, username, auditId, auditFileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiAuditSuccessResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
